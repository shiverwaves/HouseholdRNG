name: Generate Tax Households

on:
  # Manual trigger with family generation options
  workflow_dispatch:
    inputs:
      household_count:
        description: 'Number of households to generate'
        required: false
        default: '5'
        type: string
      
      tax_year:
        description: 'Tax year for generation'
        required: false
        default: '2023'
        type: choice
        options:
          - '2023'
          - '2022'
          - '2021'
          - '2024'
      
      generate_json_artifact:
        description: 'Generate JSON output as downloadable artifact'
        required: false
        default: false
        type: boolean

  # Auto-trigger on pushes to main
  push:
    branches: [ main ]
    paths: 
      - 'tax_hh_gen.py'
      - '.github/workflows/generate-tax-households.yml'

  # Auto-trigger on PRs
  pull_request:
    branches: [ main ]
    paths:
      - 'tax_hh_gen.py'
      - '.github/workflows/generate-tax-households.yml'

jobs:
  generate-households:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary python-dotenv
        # Install additional dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Verify script syntax
      run: |
        python -m py_compile tax_hh_gen.py
        echo "‚úÖ Script syntax validation passed"
    
    - name: Set generation parameters
      id: set_params
      run: |
        # Set default values
        COUNT="${{ github.event.inputs.household_count || '5' }}"
        YEAR="${{ github.event.inputs.tax_year || '2023' }}"
        JSON_ARTIFACT="${{ github.event.inputs.generate_json_artifact || 'false' }}"
        
        # For auto-triggers (push/PR), use defaults
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          COUNT="5"
          JSON_ARTIFACT="false"
        fi
        
        echo "count=$COUNT" >> $GITHUB_OUTPUT
        echo "year=$YEAR" >> $GITHUB_OUTPUT
        echo "json_artifact=$JSON_ARTIFACT" >> $GITHUB_OUTPUT
        
        echo "üè† Generating $COUNT families for tax year $YEAR"
        echo "üíæ JSON Artifact: $JSON_ARTIFACT"
    
    - name: Run Tax Household Generator
      env:
        NEON_CONNECTION_STRING: ${{ secrets.NEON_CONNECTION_STRING }}
      run: |
        echo "üè† RUNNING TAX HOUSEHOLD GENERATOR"
        echo "================================="
        
        if [ -z "$NEON_CONNECTION_STRING" ]; then
          echo "‚ùå NEON_CONNECTION_STRING is required to run the generator"
          echo "Please add your database connection string as a repository secret"
          exit 1
        fi
        
        echo "üîå Database connection detected"
        echo "üè† Running tax_hh_gen.py..."
        
        # Run the actual script
        python tax_hh_gen.py \
          --count ${{ steps.set_params.outputs.count }} \
          --tax-year ${{ steps.set_params.outputs.year }} \
          --export generated_households.json
        
        # Verify output file was created
        if [ -f "generated_households.json" ]; then
          echo "‚úÖ Household generation completed successfully"
          echo "üìÑ Output file size: $(stat -f%z generated_households.json 2>/dev/null || stat -c%s generated_households.json) bytes"
        else
          echo "‚ùå Failed to generate households - no output file created"
          exit 1
        fi
    
    - name: Generate JSON output artifact
      if: steps.set_params.outputs.json_artifact == 'true'
      run: |
        echo "üìÑ Preparing JSON artifact for download..."
        
        if [ -f "generated_households.json" ]; then
          # Copy the generated file for artifact upload
          cp generated_households.json validation_households.json
          
          echo "‚úÖ JSON artifact prepared from real generator output"
          echo "üìÑ File size: $(stat -f%z validation_households.json 2>/dev/null || stat -c%s validation_households.json) bytes"
          
          # Show a preview of the JSON structure
          python -c "
        import json
        with open('validation_households.json', 'r') as f:
            data = json.load(f)
        
        print('üìã JSON Structure Preview:')
        print(f'  - Metadata: {list(data.get(\"metadata\", {}).keys())}')
        print(f'  - Households: {len(data.get(\"households\", []))} families')
        
        if data.get('households'):
            sample = data['households'][0]
            print(f'  - Sample household fields: {list(sample.keys())}')
            if sample.get('members'):
                print(f'  - Sample member fields: {list(sample[\"members\"][0].keys())}')
          "
        else
          echo "‚ùå No generated households file found for artifact creation"
          exit 1
        fi
    
    - name: Generate Family Summary Report
      run: |
        echo ""
        echo "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ GENERATED FAMILIES DETAILS"
        echo "=================================="
        
        if [ -f "generated_households.json" ]; then
          python -c "
        import json
        
        # Load the generated households
        with open('generated_households.json', 'r') as f:
            data = json.load(f)
        
        households = data.get('households', [])
        metadata = data.get('metadata', {})
        
        if not households:
            print('‚ùå No households found in output file')
            exit(1)
        
        print(f'üìä Generated {len(households)} families for tax year {metadata.get(\"tax_year\", \"Unknown\")}')
        print(f'üìÖ Generation date: {metadata.get(\"generation_date\", \"Unknown\")}')
        print()
        
        # Display ALL families in complete detail
        for i, household in enumerate(households):
            print(f'Family {i+1}: {household[\"household_id\"]}')
            print(f'  üìç Location: {household[\"state_name\"]}')
            print(f'  üß¨ Race/Ethnicity: {household.get(\"primary_race\", \"Unknown\")}')
            print(f'  üìã Filing Status: {household[\"filing_status\"]}')
            print(f'  üí∞ Household Income: \${household[\"total_household_income\"]:,}')
            print(f'  üë• Size: {household[\"household_size\"]} members ({household[\"number_of_dependents\"]} dependents)')
            print(f'  üë§ Members:')
            
            for member in household['members']:
                income_str = f\", \${member['annual_income']:,}\" if member['annual_income'] > 0 else ''
                occupation_str = f\" ({member.get('occupation', 'No Job')})\" if member.get('occupation') else ''
                dependent_str = ' [Dependent]' if member.get('is_dependent', False) else ''
                income_type_str = f\" [{member.get('income_type', 'Unknown')}]\" if member.get('income_type') and member['annual_income'] > 0 else ''
                
                print(f'    - {member[\"role\"]}: {member[\"gender\"]}, Age {member[\"age\"]}, {member[\"employment_status\"]}{occupation_str}{income_str}{income_type_str}{dependent_str}')
            print()
        
        print(f'‚úÖ Displayed all {len(households)} families in complete detail')
          "
        else
          echo "‚ùå No household data file found to analyze"
          exit 1
        fi
    
    - name: Generate summary report
      run: |
        echo ""
        echo "üìä GENERATION SUMMARY"
        echo "===================="
        echo "Python Version: 3.11"
        echo "Household Count: ${{ steps.set_params.outputs.count }}"
        echo "Tax Year: ${{ steps.set_params.outputs.year }}"
        echo "JSON Artifact: ${{ steps.set_params.outputs.json_artifact }}"
        echo ""
        echo "‚úÖ Tax household generation completed successfully!"
        echo ""
        echo "Next Steps:"
        echo "- Review the family generation details above"
        echo "- Download JSON artifact if enabled"
        echo "- Use generated families for tax preparation practice"
    
    - name: Upload JSON artifact
      if: steps.set_params.outputs.json_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: tax-households-${{ steps.set_params.outputs.count }}-families-${{ steps.set_params.outputs.year }}
        path: validation_households.json
        retention-days: 30
    
    - name: Upload validation artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: generation-logs-${{ steps.set_params.outputs.count }}-families
        path: |
          *.log
          test_output.json
        retention-days: 7
